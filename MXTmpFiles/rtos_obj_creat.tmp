#n
#t/* USER CODE BEGIN RTOS_MUTEX */
#t/* add mutexes, ... */
#t/* USER CODE END RTOS_MUTEX */
#n#t/* Create the semaphores(s) */
#t/* definition and creation of binarySemAnalog */
#tosSemaphoreDef(binarySemAnalog);
#tbinarySemAnalogHandle = osSemaphoreCreate(osSemaphore(binarySemAnalog), 1);
#n
#n
#t/* USER CODE BEGIN RTOS_SEMAPHORES */
#t/* add semaphores, ... */
#t/* USER CODE END RTOS_SEMAPHORES */
#n
#t/* USER CODE BEGIN RTOS_TIMERS */
#t/* start timers, add new ones, ... */
#t/* USER CODE END RTOS_TIMERS */
#n
#t/* USER CODE BEGIN RTOS_QUEUES */
#t/* add queues, ... */
#t/* USER CODE END RTOS_QUEUES */
#n#t/* Create the thread(s) */
#t/* definition and creation of TouchGFXTask */
#tosThreadDef(TouchGFXTask, TouchGFX_Task, osPriorityNormal, 0, 4096);
#tTouchGFXTaskHandle = osThreadCreate(osThread(TouchGFXTask), NULL);
#n
#t/* definition and creation of taskAnalogInput */
#tosThreadDef(taskAnalogInput, StartTaskAnalogInput, osPriorityLow, 0, 128);
#ttaskAnalogInputHandle = osThreadCreate(osThread(taskAnalogInput), NULL);
#n
#n
#t/* USER CODE BEGIN RTOS_THREADS */
#t/* add threads, ... */
#t/* USER CODE END RTOS_THREADS */
#n
